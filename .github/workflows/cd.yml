name: CD

on:
  push:
    branches:
      - main

jobs:
  test-build-deploy:
    name: Test → Build → Deploy
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['20.x']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint (optional)
        run: npm run lint || echo "lint not configured or failed; continuing"

      - name: Type check
        run: npm run typecheck || { echo 'Type check failed'; exit 1; }

      - name: Run tests (CI)
        env:
          CI: true
        run: |
          # 事前に package.json に "test:ci" を作っておくと楽です
          if npm run | grep -q "test:ci"; then
            npm run test:ci
          else
            npm run test -- --run --coverage
          fi

      - name: Build (production)
        run: npm run build

      - name: Trigger Render deploy (create a new deploy via API)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Triggering render deploy for service $RENDER_SERVICE_ID..."
          resp=$(curl -sS -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{}')
          echo "Render response: $resp"
          # optional: fail if API returns an error object
          echo "$resp" | jq -e '.id // .serviceId' >/dev/null || (echo "Render deploy failed" >&2; echo "$resp" >&2; exit 1)

      - name: Wait for Render deploy to finish (poll)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Polling Render to wait for deploy to finish..."
          deploy_id=$(curl -sS -X GET "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" | jq -r '.[0].id')
          if [ -z "$deploy_id" ] || [ "$deploy_id" = "null" ]; then
            echo "Could not find latest deploy id" >&2
            exit 1
          fi
          echo "Latest deploy id: $deploy_id"
          # Poll status until success or failure
          for i in $(seq 1 60); do
            status=$(curl -sS -X GET "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys/${deploy_id}" \
              -H "Authorization: Bearer ${RENDER_API_KEY}" | jq -r '.state')
            echo "Status: $status"
            if [ "$status" = "live" ]; then
              echo "Deploy succeeded"
              exit 0
            fi
            if [ "$status" = "failed" ] || [ "$status" = "cancelled" ]; then
              echo "Deploy failed (status=$status)" >&2
              curl -sS -X GET "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys/${deploy_id}" \
                -H "Authorization: Bearer ${RENDER_API_KEY}" | jq -C .
              exit 1
            fi
            sleep 5
          done
          echo "Deploy did not complete within timeout" >&2
          exit 1
