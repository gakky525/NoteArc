name: CD

on:
  push:
    branches:
      - main

jobs:
  test-build-deploy:
    name: Test → Build → Deploy
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['20.x']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint (optional)
        run: npm run lint || echo "lint not configured or failed; continuing"

      - name: Type check
        run: npm run typecheck || { echo 'Type check failed'; exit 1; }

      - name: Run tests (CI)
        env:
          CI: true
        run: |
          # 事前に package.json に "test:ci" を作っておくと楽です
          if npm run | grep -q "test:ci"; then
            npm run test:ci
          else
            npm run test -- --run --coverage
          fi

      - name: Build (production)
        run: npm run build

      - name: Trigger & wait Render deploy (robust)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          set -euo pipefail

          # ensure jq available
          if ! command -v jq >/dev/null 2>&1; then
            echo "Installing jq..."
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

          echo "Triggering deploy for service: ${RENDER_SERVICE_ID}"
          resp=$(curl -sS -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{}' ) || true

          echo "Render POST response:"
          echo "$resp"

          deployId=$(echo "$resp" | jq -r '.id // empty')
          if [ -z "$deployId" ]; then
            # try alternate fields for older api responses
            deployId=$(echo "$resp" | jq -r '.serviceId // empty')
          fi

          if [ -z "$deployId" ]; then
            echo "ERROR: deploy id not found in response above. Exiting."
            exit 1
          fi

          echo "Deploy id: $deployId"

          # Polling loop (adjust timeout as needed)
          for i in $(seq 1 120); do
            statusResp=$(curl -sS -H "Authorization: Bearer ${RENDER_API_KEY}" \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys/${deployId}") || true
            echo "statusResp: $statusResp"
            # Render may use 'state' or 'status' fields; check both
            state=$(echo "$statusResp" | jq -r '.state // empty')
            status=$(echo "$statusResp" | jq -r '.status // empty')
            echo "Poll #$i state=$state status=$status"

            # success conditions (cover common values)
            if [ "$state" = "succeeded" ] || [ "$state" = "live" ] || [ "$status" = "succeeded" ] || [ "$status" = "live" ]; then
              echo "Deploy succeeded (state=$state status=$status)"
              exit 0
            fi

            # failure conditions
            if [ "$state" = "failed" ] || [ "$state" = "cancelled" ] || [ "$status" = "failed" ] || [ "$status" = "cancelled" ]; then
              echo "Deploy failed (state=$state status=$status)"
              echo "Full deploy object:"
              echo "$statusResp" | jq .
              exit 1
            fi

            sleep 5
          done

          echo "Timed out waiting for deploy to finish"
          exit 1
